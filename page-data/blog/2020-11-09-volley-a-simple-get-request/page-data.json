{
    "componentChunkName": "component---src-pages-blog-mdx-slug-js",
    "path": "/blog/2020-11-09-volley-a-simple-get-request/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"hidden\": false,\n  \"title\": \"A simple Volley Request\",\n  \"date\": \"2020-11-09\",\n  \"categories\": \"android Volley android-studio kotlin tech\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hey so, today I'm going to go over how to make a simple http get request in Volley. I will be following this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.android.com/training/volley/simple\"\n  }, \"page\"), \".\"), mdx(\"p\", null, \"First, we will have to enable internet permissions. This will allow us to communicate with the internet with Volley. So add this line to your AndroidManifest.xml file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"    <uses-permission android:name=\\\"android.permission.INTERNET\\\" />\\n\")), mdx(\"p\", null, \"I placed inside the manifest tag just above my application tag. You should be able to place it anywhere as long as it is not in the application tag & as long as it is inside the manifest tag.\"), mdx(\"p\", null, \"The next step is the request itself. I will essentially just follow the official documentation I sited above for this. Lets start by adding a new request Queue. You can make one manually which allows you to have a more fine grained control over the queue itself, but I will just be using the newRequestQueue function that volley provides. To read more about making a RequestQueue manually go \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.android.com/training/volley/requestqueue\"\n  }, \"here\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"    val queue = Volley.newRequestQueue(this)\\n\")), mdx(\"p\", null, \"Note that the keyword \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \" is the activity that you are working in so if you put this code in a fragment it will not work. I will go back and explain how to fix that issue in a later post.\"), mdx(\"p\", null, \"Now we will instantiate the url and make the post. I will be using a print statement but the tutorial I am following uses a textView so that may be worth noting.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"    val queue = Volley.newRequestQueue(this)\\n    val url = \\\"https://www.google.com\\\"\\n\\n    // Request a response from the provided URL.\\n    val stringRequest = StringRequest(Request.Method.GET, url,\\n        Response.Listener<String> { response ->\\n            // Display the first 500 characters of the response string.\\n            println(\\\"Response is: ${response.substring(0, 500)}\\\")\\n        },\\n        Response.ErrorListener { println(\\\"That didn't work!\\\" )})\\n\\n    // Add the request to the RequestQueue (and run the request.)\\n    queue.add(stringRequest)\\n\")), mdx(\"p\", null, \"Be ready with alt-Enter to add the required dependencies into your Activity. In case you have any problems with that here is what my imports look like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"import androidx.appcompat.app.AppCompatActivity\\nimport android.os.Bundle\\nimport com.android.volley.Request\\nimport com.android.volley.Response\\nimport com.android.volley.toolbox.StringRequest\\nimport com.android.volley.toolbox.Volley\\n\")), mdx(\"p\", null, \"Then wah-la we have a response:\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/2020-11-10-SimpleGet/Response.png\",\n    \"alt\": \"An http response\"\n  })), mdx(\"p\", null, \"Oh and also in case someone stops the activity you might want to add this code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"protected fun onStop() {\\n    super.onStop()\\n    requestQueue?.cancelAll(TAG)\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"A simple Volley Request","date":"November 09, 2020"}}},"pageContext":{"id":"db7a44c9-422f-58f0-b588-d44ccfd689ab","slug":"2020-11-09-Volley-a-simple-get-request","__params":{"slug":"2020-11-09-volley-a-simple-get-request"}}},
    "staticQueryHashes": []}